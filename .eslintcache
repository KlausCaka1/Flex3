[{"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\reportWebVitals.js":"1","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\App.js":"2","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\table\\table.js":"3","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\kanban\\kanban.js":"4","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\filter.js":"5","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\index.js":"6","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\addTask.js":"7","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\card.js":"8","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\taskDetails.js":"9","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\modalComponents.js":"10"},{"size":362,"mtime":1608123330401,"results":"11","hashOfConfig":"12"},{"size":13584,"mtime":1611779126598,"results":"13","hashOfConfig":"12"},{"size":4927,"mtime":1611752811671,"results":"14","hashOfConfig":"12"},{"size":4305,"mtime":1611767550952,"results":"15","hashOfConfig":"12"},{"size":382,"mtime":1611598270450,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1608123330401,"results":"17","hashOfConfig":"12"},{"size":4901,"mtime":1611768969731,"results":"18","hashOfConfig":"12"},{"size":549,"mtime":1611767676912,"results":"19","hashOfConfig":"12"},{"size":6573,"mtime":1611777033104,"results":"20","hashOfConfig":"12"},{"size":2994,"mtime":1611777177685,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13ph1nh",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\reportWebVitals.js",[],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\App.js",["44","45"],"import 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport './App.css';\nimport React, {Component} from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Table from './table/table';\nimport Kanban from \"./kanban/kanban\";\nimport {AiFillPlusCircle} from 'react-icons/ai';\nimport Board, {moveCard} from \"@lourenci/react-kanban\";\nimport AddTaskModal from \"./common_components/addTask\";\nimport {TaskInfo} from \"./common_components/taskDetails\";\n\n\nclass App extends Component {\n    state = {\n        modalVisible: false,\n        value: 0,\n        rows: [\n            {\n                id: 1,\n                title: 'Cant add new tasks',\n                start_date: new Date('2020-05-21'),\n                dead_line: new Date('2020-08-30'),\n                milestone: '-',\n                project: 'Logo Design',\n                assigned_to: 'Jhon Doe',\n                collaborators: '-',\n                status: 'In Progress',\n                points: 1,\n                checklist: [],\n                subTasks: [],\n                activities: [\n                    {\n                        person: 'Jhone Doe',\n                        time: new Date('2020-05-21'),\n                        activity: 'Added',\n                        color: '#0ABB87',\n                        actions: []\n                    }\n                ]\n            },\n            {\n                id: 2,\n                title: 'Add tasks',\n                start_date: new Date('2020-02-21'),\n                dead_line: new Date('2020-05-30'),\n                milestone: '-',\n                project: 'Website Development',\n                assigned_to: 'Ana Doe',\n                collaborators: '-',\n                status: 'In Progress',\n                points: 1,\n                checklist: [],\n                subTasks: [],\n                activities: [\n                    {\n                        person: 'Ana Doe',\n                        time: new Date('2020-02-21'),\n                        activity: 'Added',\n                        color: '#0ABB87',\n                        actions: []\n                    }\n                ]\n\n            },\n            {\n                id: 3,\n                title: 'Add some cool Apis',\n                start_date: new Date('2020-01-21'),\n                dead_line: new Date('2020-04-30'),\n                milestone: '-',\n                project: 'Website Development',\n                assigned_to: 'Sara Doe',\n                collaborators: '-',\n                status: 'To do',\n                points: 1,\n                checklist: [],\n                subTasks: [],\n                activities: [\n                    {\n                        person: 'Sara Doe',\n                        time: new Date('2020-01-21'),\n                        activity: 'Added',\n                        color: '#0ABB87',\n                        actions: []\n                    }\n                ]\n            }\n        ],\n        board: {columns: []},\n        title: '',\n        description: '',\n        project: '',\n        points: 0,\n        milestone: '',\n        assign_to: '',\n        collaborators: [],\n        status: '',\n        statuses: ['To do', 'In Progress', 'Testing', 'Done'],\n        colors: ['#ffbb45', '#488eff', '#b952ff', '#5dffc9'],\n        labels: '',\n        start_date: '',\n        deadline: '',\n        checkList: '',\n        subTask: '',\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.rows !== this.state.rows) {\n            this.formColumns();\n        }\n    }\n\n    componentWillMount() {\n        this.formColumns();\n    }\n\n    formColumns = () => {\n        const columns = [];\n        let counter = 0;\n        this.state.statuses.forEach(status => {\n            columns.push(\n                {\n                    id: counter,\n                    title: status,\n                    color: this.state.colors[counter],\n                    cards: this.state.rows.filter(row => row.status === status),\n                }\n            )\n            counter++;\n        });\n        this.setState({\n            board: {\n                columns: columns\n            }\n        });\n    }\n\n    handleCardMove = (_card, source, destination) => {\n        const updatedBoard = moveCard(this.state.board, source, destination);\n        this.setState({\n            rows: this.state.rows.map((row) => {\n                return row.id === _card.id ? {\n                    ...row,\n                    status: this.state.statuses[destination.toColumnId],\n                } : row\n            })\n        });\n        this.setState({board: updatedBoard})\n    }\n\n    setValue = (event, newValue) => {\n        this.setState({value: newValue})\n    }\n\n    showModal = () => {\n        this.setState({modalVisible: !this.state.modalVisible});\n    }\n\n    saveModal = () => {\n        this.setState({\n            modalVisible: !this.state.modalVisible,\n            rows: [...this.state.rows,\n                {\n                    id: this.state.rows.length + 1,\n                    title: this.state.title,\n                    start_date: new Date(this.state.start_date),\n                    dead_line: new Date(this.state.deadline),\n                    milestone: this.state.milestone,\n                    assigned_to: this.state.assign_to,\n                    collaborators: this.state.collaborators,\n                    status: this.state.status === '' ? 'To do' : this.state.status,\n                    activities: [\n                        {\n                            person: 'Jhone Doe',\n                            time: new Date('2020-05-21'),\n                            activity: 'Added',\n                            color: '#0ABB87',\n                            actions: []\n                        }\n                    ]\n                }],\n            title: '',\n            description: '',\n            project: '',\n            points: 0,\n            milestone: '',\n            assign_to: '',\n            collaborators: [],\n            status: '',\n            labels: '',\n            start_date: '',\n            deadline: '',\n            rowSelected: {},\n            showDetails: false,\n        });\n    }\n\n    setTitle = (event) => {\n        this.setState({title: event.target.value});\n    }\n\n    setDescription = (event) => {\n        this.setState({description: event.target.value});\n    }\n\n    setProject = (event) => {\n        this.setState({project: event.target.value});\n    }\n\n    setPoints = (event) => {\n        this.setState({point: event.target.value});\n    }\n\n    setMilestone = (event) => {\n        this.setState({milestone: event.target.value});\n    }\n\n    setAssignTo = (event) => {\n        this.setState({assign_to: event.target.value});\n    }\n\n    setCollaborators = (event) => {\n        this.setState({collaborators: event.target.value});\n    }\n\n    setStatus = (event) => {\n        this.setState({status: event.target.value});\n    }\n\n    setLabel = (event) => {\n        this.setState({labels: event.target.value});\n    }\n\n    setStartDate = (event) => {\n        this.setState({start_date: event.value})\n    }\n\n    setDeadline = (event) => {\n        this.setState({deadline: event.value});\n    }\n\n    setCheckList = (event) => {\n        this.setState({checkList: event.target.value});\n    }\n\n    setSubTask = (event) => {\n        this.setState({subTask: event.target.value});\n    }\n\n    addCheckList = () => {\n        this.setState({\n            rows: this.state.rows.map((row) => {\n                return row.id === this.state.rowSelected.id ? {\n                    ...row,\n                    checklist: [\n                        ...row.checklist,\n                        {\n                            id: row.checklist.length,\n                            value: this.state.checkList\n                        }\n                    ],\n                } : row\n            }),\n            rowSelected: {\n                ...this.state.rowSelected,\n                checklist: [\n                    ...this.state.rowSelected.checklist,\n                    {\n                        id: this.state.rowSelected.checklist.length,\n                        value: this.state.checkList\n                    }\n                ],\n            },\n            checkList: ''\n        });\n    }\n\n    deleteCheckList = (id) => {\n        let counter = 0;\n        const reducedCheckList = this.state.rowSelected.checklist.map((element) => {\n            if (element.id !== id) {\n                const checkList = {\n                    id: counter,\n                    value: element.value,\n                }\n                counter++;\n                return checkList\n            }\n        })\n        this.setState({\n            rows: this.state.rows.map((row) => {\n                return row.id === this.state.rowSelected.id ? {\n                    ...row,\n                    checklist: reducedCheckList.filter(el => el !== undefined)\n                } : row\n            }),\n            rowSelected: {\n                ...this.state.rowSelected,\n                checklist: reducedCheckList.filter(el => el !== undefined)\n            },\n        });\n    }\n\n    addSubTask = () => {\n        this.setState({\n            rows: this.state.rows.map((row) => {\n                return row.id === this.state.rowSelected.id ? {\n                    ...row,\n                    subTasks: [\n                        ...row.subTasks,\n                        {\n                            value: this.state.subTask,\n                            status: 'To do'\n                        }\n                    ],\n                } : row\n            }),\n            rowSelected: {\n                ...this.state.rowSelected,\n                subTasks: [\n                    ...this.state.rowSelected.subTasks,\n                    {\n                        value: this.state.subTask,\n                        status: 'To do'\n                    }\n                ],\n            },\n            subTask: ''\n        });\n    }\n\n    rowClicked = (RowParams) => {\n        this.setState({\n            showDetails: !this.state.showDetails,\n            rowSelected: RowParams.row,\n        })\n    }\n\n    closeDetails = () => {\n        this.setState({\n            showDetails: !this.state.showDetails,\n            rowSelected: {},\n        })\n    }\n\n    render() {\n        return (\n            <div style={{display: \"flex\", flexDirection: 'column', height: '100%'}}>\n                <header className=\"app__header\">\n                    <div className=\"app__tabs\">\n                        <span className=\"app__header__title\">Tasks</span>\n                        <Tabs\n                            value={this.state.value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={this.setValue}\n                            aria-label=\"disabled tabs example\"\n                        >\n                            <Tab label=\"List\"/>\n                            <Tab label=\"Kanban\"/>\n                        </Tabs>\n                    </div>\n                    <div className=\"app__header__buttons\">\n                        <button className=\"app__header__button\">\n                            <AiFillPlusCircle/>\n                            <span>Add multiple tasks</span>\n                        </button>\n                        <button className=\"app__header__button\" onClick={this.showModal}>\n                            <AiFillPlusCircle/>\n                            <span>Add task</span>\n                        </button>\n                    </div>\n                </header>\n                <Table rows={this.state.rows} rowSelected={this.rowClicked} value={this.state.value} index={0}/>\n                <Kanban style={{height: '100%'}}\n                        value={this.state.value}\n                        index={1}\n                        columns={this.state.board}\n                        handleCardMove={this.handleCardMove}/>\n                {this.state.modalVisible ?\n                    <div>\n                        <AddTaskModal\n                            setTitle={this.setTitle}\n                            setDescription={this.setDescription}\n                            setProject={this.setProject}\n                            setPoints={this.setPoints}\n                            setMilestone={this.setMilestone}\n                            setAssignTo={this.setAssignTo}\n                            setCollaborators={this.setCollaborators}\n                            setStatus={this.setStatus}\n                            setLabels={this.setLabel}\n                            setStartDate={this.setStartDate}\n                            setDeadLine={this.setDeadline}\n                            closeModal={this.showModal}\n                            save={this.saveModal}/>\n                    </div>\n                    :\n                    null}\n                {this.state.showDetails ?\n                    <TaskInfo\n                        checkList={this.state.checkList}\n                        subTask={this.state.subTask}\n                        deleteCheckList={this.deleteCheckList}\n                        setChecklist={this.setCheckList}\n                        setSubTask={this.setSubTask}\n                        addCheckList={this.addCheckList}\n                        addSubTask={this.addSubTask}\n                        row={this.state.rowSelected}\n                        closeModal={this.closeDetails}/> : null}\n            </div>\n        );\n    }\n\n\n}\n\nexport default App;\n","C:\\Users\\test\\WebstormProjects\\flextasks\\src\\table\\table.js",["46"],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\kanban\\kanban.js",["47"],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\filter.js",[],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\index.js",[],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\addTask.js",[],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\card.js",[],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\taskDetails.js",["48","49","50"],"C:\\Users\\test\\WebstormProjects\\flextasks\\src\\common_components\\modalComponents.js",["51"],"import React from \"react\";\r\nimport {AiOutlineClose, AiOutlineCheck} from 'react-icons/ai';\r\n\r\nconst Activity = (props) => {\r\n    return (\r\n        <div className=\"detailsModal__activity\" key={props.index}>\r\n            <img src=\"https://rise.fairsketch.com/files/profile_images//_file5b24fd7748025-avatar.png\"\r\n                 className=\"detailsModal__profilePic\"/>\r\n            <div>\r\n                <span className=\"detailsModal__activity__time\"><strong>{props.person}</strong>\r\n                    {props.time.getFullYear()}-{props.time.getMonth()}-{props.time.getDate()}\r\n                </span>\r\n                <div>\r\n                    <span className=\"detailsModal__activity__action\"\r\n                          style={{background: props.color}}>\r\n                        {props.activity}\r\n                    </span>\r\n                    <span>Task: #{props.id} - {props.title}</span>\r\n                    <ul>\r\n                        {props.actions.map((action, index) => {\r\n                            return (\r\n                                <li key={index}>\r\n                                    {action}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CheckLists = (props) => {\r\n    return (\r\n        <div className=\"modal__subAddElement\">\r\n            <label>\r\n                <input type=\"checkbox\"/>\r\n                <span>{props.value} {props.id}</span>\r\n            </label>\r\n            <AiOutlineClose onClick={() => props.deleteCheckList(props.id)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst SubTask = (props) => {\r\n    return (\r\n        <div className=\"modal__subAddElement\">\r\n            <label>\r\n                <input type=\"checkbox\"/>\r\n                <span>{props.value}</span>\r\n            </label>\r\n            <span>{props.status}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddCloseCheckList = (props) => {\r\n    return (\r\n        <div style={{ display: 'flex'}}>\r\n            <button className=\"modal__createButton\" onClick={props.addCheckList}>\r\n                <AiOutlineCheck/>\r\n                Add\r\n            </button>\r\n            <button className=\"modal__createButton\"\r\n                    onClick={props.hideButton}>\r\n                <AiOutlineClose/>\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddCloseSubTask = (props) => {\r\n    return (\r\n        <div style={{ display: 'flex'}}>\r\n            <button className=\"modal__createButton\" onClick={props.addSubTask}>\r\n                <AiOutlineCheck/>\r\n                Add\r\n            </button>\r\n            <button className=\"modal__createButton\"\r\n                    onClick={props.hideButton}>\r\n                <AiOutlineClose/>\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Activity,\r\n    CheckLists,\r\n    SubTask,\r\n    AddCloseCheckList,\r\n    AddCloseSubTask\r\n}",{"ruleId":"52","severity":1,"message":"53","line":10,"column":8,"nodeType":"54","messageId":"55","endLine":10,"endColumn":13},{"ruleId":"56","severity":1,"message":"57","line":282,"column":81,"nodeType":"58","messageId":"59","endLine":282,"endColumn":83},{"ruleId":"52","severity":1,"message":"60","line":7,"column":9,"nodeType":"54","messageId":"55","endLine":7,"endColumn":17},{"ruleId":"52","severity":1,"message":"61","line":8,"column":9,"nodeType":"54","messageId":"55","endLine":8,"endColumn":22},{"ruleId":"52","severity":1,"message":"62","line":2,"column":9,"nodeType":"54","messageId":"55","endLine":2,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":55,"column":29,"nodeType":"65","endLine":56,"endColumn":72},{"ruleId":"63","severity":1,"message":"64","line":83,"column":21,"nodeType":"65","endLine":84,"endColumn":64},{"ruleId":"63","severity":1,"message":"64","line":7,"column":13,"nodeType":"65","endLine":8,"endColumn":56},"no-unused-vars","'Board' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TaskInfo' is defined but never used.","'FcBusinessman' is defined but never used.","'AiFillSetting' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]